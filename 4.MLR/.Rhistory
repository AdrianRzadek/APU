#install.packages("party")
#install.packages("mlr")
#install.packages("C50")
#install.packages("mlr3learners")
library(readr)
library(dplyr)
library(party)
library(rpart)
library(mlr3)
#library(mlr)
library(MASS)
library(C50)
library(mlr3learners)
smartfony <- read.csv("./smartfony.csv")
smartfony_tree <- rpart(nazwa ~ ., data = smartfony, method = "class")
summary(smartfony_tree)
tree_fit <- ctree(status ~ ., data = smartfony)
#install.packages("party")
#install.packages("mlr")
#install.packages("C50")
#install.packages("mlr3learners")
library(readr)
library(dplyr)
library(party)
library(rpart)
library(mlr3)
#library(mlr)
library(MASS)
library(C50)
library(mlr3learners)
smartfony <- read.csv("./smartfony.csv")
smartfony_tree <- rpart(nazwa ~ ., data = smartfony, method = "class")
summary(smartfony_tree)
tree_fit <- ctree(cena ~ ., data = smartfony)
#install.packages("party")
#install.packages("mlr")
#install.packages("C50")
#install.packages("mlr3learners")
library(readr)
library(dplyr)
library(party)
library(rpart)
library(mlr3)
#library(mlr)
library(MASS)
library(C50)
library(mlr3learners)
smartfony <- read.csv("./smartfony.csv")
smartfony_tree <- rpart(nazwa ~ ., data = smartfony, method = "class")
summary(smartfony_tree)
tree_fit <- ctree(nazwa ~ ., data = smartfony)
#install.packages("party")
#install.packages("mlr")
#install.packages("C50")
#install.packages("mlr3learners")
library(readr)
library(dplyr)
library(party)
library(rpart)
library(mlr3)
#library(mlr)
library(MASS)
library(C50)
library(mlr3learners)
smartfony <- read.csv("./smartfony.csv")
smartfony_tree <- rpart(nazwa ~ ., data = smartfony, method = "class")
summary(smartfony_tree)
tree_fit <- ctree(nazwa ~ , data = smartfony)
tree_fit <- ctree(nazwa ~ ., data = smartfony)
smartfony_tree <- rpart(nazwa ~ ., data = smartfony, method = "class")
summary(smartfony_tree)
smartfony_tree <- rpart(liczba_opinii ~ ., data = smartfony, method = "class")
summary(smartfony_tree)
tree_fit <- ctree(liczba_opinii ~ ., data = smartfony)
character_columns <- sapply(smartfony, is.character)
character_columns
# Przekonwertowanie kolumn "character" na "factor"
smartfony[character_columns] <- lapply(smartfony[character_columns], as.factor)
# Upewnienie się, że wszystkie kolumny są teraz prawidłowego typu
str(smartfony)
# Ponowne uruchomienie funkcji ctree
tree_fit <- ctree(nazwa ~ ., data = smartfony)
plot(tree_fit)
plot(smartfony_tree)
smartfony_tree <- rpart(liczba_opinii ~ ., data = smartfony, method = "class")
summary(smartfony_tree)
tree_fit <- ctree(liczba_opinii ~ ., data = smartfony)
plot(smartfony_tree)
learners <- mlr_learners
print(learners)
task = as_task_classif(sex ~ ., data = smartfony)
task = as_task_classif(cena ~ ., data = smartfony)
task
learner = lrn("classif.rpart", cp = .01)
split = partition(task, ratio = 0.67)
# train the model
learner$train(task, split$train)
# predict data
prediction = learner$predict(task, split$test_set)
# calculate performance
prediction$confusion
measure = msr("classif.acc")
prediction$score(measure)
# 3-fold cross validation
resampling = rsmp("cv", folds = 3L)
# run experiments
rr = resample(task, learner, resampling)
# access results
rr$score(measure)[, .(task_id, learner_id, iteration, classif.acc)]
rr$aggregate(measure)
library(readr)
library(dplyr)
library(party)
library(rpart)
library(mlr3)
#library(mlr)
library(MASS)
library(C50)
library(mlr3learners)
smartfony <- read.csv("./smartfony.csv")
character_columns <- sapply(smartfony, is.character)
character_columns
# Przekonwertowanie kolumn "character" na "factor"
smartfony[character_columns] <- lapply(smartfony[character_columns], as.factor)
# Upewnienie się, że wszystkie kolumny są teraz prawidłowego typu
str(smartfony)
# Ponowne uruchomienie funkcji ctree
tree_fit <- ctree(nazwa ~ ., data = smartfony)
smartfony_tree <- rpart(liczba_opinii ~ ., data = smartfony, method = "class")
summary(smartfony_tree)
tree_fit <- ctree(liczba_opinii ~ ., data = smartfony)
plot(smartfony_tree)
summary(smartfony_tree)
tree_fit <- ctree(cena ~ ., data = smartfony)
smartfony_tree <- rpart(liczba_opinii ~ ., data = smartfony, method = "class")
summary(smartfony_tree)
tree_fit <- ctree(liczba_opinii ~ ., data = smartfony)
plot(smartfony_tree)
tree_fit <- ctree(cena~ ., data = smartfony)
plot(smartfony_tree)
smartfony_tree <- rpart(liczba_opinii ~ ., data = smartfony, method = "class")
summary(smartfony_tree)
plot(smartfony_tree)
plot(tree_fit)
smartfony_tree_rpart <- rpart(nazwa ~ ., data = smartfony, control = rpart.control(minsplit = 10, cp = 0.01))
summary(smartfony_tree)
tree_fit <- ctree(cena~ ., data = smartfony)
plot(smartfony_tree)
learners <- mlr_learners
print(learners)
task = as_task_classif(cena ~ ., data = smartfony)
task
learner = lrn("classif.rpart", cp = .01)
split = partition(task, ratio = 0.67)
# train the model
learner$train(task, split$train)
# predict data
prediction = learner$predict(task, split$test_set)
# calculate performance
prediction$confusion
measure = msr("classif.acc")
prediction$score(measure)
# 3-fold cross validation
resampling = rsmp("cv", folds = 3L)
# run experiments
rr = resample(task, learner, resampling)
# access results
rr$score(measure)[, .(task_id, learner_id, iteration, classif.acc)]
rr$aggregate(measure)
task = as_task_classif(opinie ~ ., data = smartfony)
#install.packages("party")
#install.packages("mlr")
#install.packages("C50")
#install.packages("mlr3learners")
library(readr)
library(dplyr)
library(party)
library(rpart)
library(mlr3)
#library(mlr)
library(MASS)
library(C50)
library(mlr3learners)
data("Melanoma")
#melanoma_task <- makeClassifTask(status ~ ., data = Melanoma, target = "sex")
melanoma_tree <- rpart(sex ~ ., data = Melanoma, method = "class")
summary(melanoma_tree)
tree_fit <- ctree(status ~ ., data = Melanoma)
plot(melanoma_tree)
text(melanoma_tree, use.n = TRUE)
plot(tree_fit)
learners <- mlr_learners
print(learners)
task = as_task_classif(sex ~ ., data = Melanoma)
task
learner = lrn("classif.rpart", cp = .01)
split = partition(task, ratio = 0.67)
learner$train(task, split$train)
prediction = learner$predict(task, split$test_set)
prediction$confusion
measure = msr("classif.acc")
prediction$score(measure)
resampling = rsmp("cv", folds = 3L)
rr = resample(task, learner, resampling)
rr$score(measure)[, .(task_id, learner_id, iteration, classif.acc)]
rr$aggregate(measure)
#install.packages("party")
#install.packages("mlr")
#install.packages("C50")
#install.packages("mlr3learners")
library(readr)
library(dplyr)
library(party)
library(rpart)
library(mlr3)
#library(mlr)
library(MASS)
library(C50)
library(mlr3learners)
data("Melanoma")
#melanoma_task <- makeClassifTask(status ~ ., data = Melanoma, target = "sex")
melanoma_tree <- rpart(sex ~ ., data = Melanoma, method = "class")
summary(melanoma_tree)
tree_fit <- ctree(status ~ ., data = Melanoma)
plot(melanoma_tree)
text(melanoma_tree, use.n = TRUE)
plot(tree_fit)
learners <- mlr_learners
print(learners)
task = as_task_classif(sex ~ ., data = Melanoma)
task
learner = lrn("classif.rpart", cp = .01)
split = partition(task, ratio = 0.67)
learner$train(task, split$train)
prediction = learner$predict(task, split$test_set)
prediction$confusion
measure = msr("classif.acc")
prediction$score(measure)
resampling = rsmp("cv", folds = 3L)
rr = resample(task, learner, resampling)
rr$score(measure)[, .(task_id, learner_id, iteration, classif.acc)]
rr$aggregate(measure)
#install.packages("party")
#install.packages("mlr")
#install.packages("C50")
#install.packages("mlr3learners")
library(readr)
library(dplyr)
library(party)
library(rpart)
library(mlr3)
#library(mlr)
library(MASS)
library(C50)
library(mlr3learners)
data("Melanoma")
#melanoma_task <- makeClassifTask(status ~ ., data = Melanoma, target = "sex")
melanoma_tree <- rpart(sex ~ ., data = Melanoma, method = "class")
summary(melanoma_tree)
tree_fit <- ctree(status ~ ., data = Melanoma)
plot(melanoma_tree)
text(melanoma_tree, use.n = TRUE)
plot(tree_fit)
learners <- mlr_learners
print(learners)
task = as_task_classif(sex ~ ., data = Melanoma)
task
learner = lrn("classif.rpart", cp = .01)
split = partition(task, ratio = 0.67)
learner$train(task, split$train)
prediction = learner$predict(task, split$test_set)
prediction$confusion
measure = msr("classif.acc")
prediction$score(measure)
resampling = rsmp("cv", folds = 3L)
rr = resample(task, learner, resampling)
rr$score(measure)[, .(task_id, learner_id, iteration, classif.acc)]
rr$aggregate(measure)
#install.packages("party")
#install.packages("mlr")
#install.packages("C50")
#install.packages("mlr3learners")
library(readr)
library(dplyr)
library(party)
library(rpart)
library(mlr3)
#library(mlr)
library(MASS)
library(C50)
library(mlr3learners)
data("Melanoma")
#melanoma_task <- makeClassifTask(status ~ ., data = Melanoma, target = "sex")
melanoma_tree <- rpart(sex ~ ., data = Melanoma, method = "class")
summary(melanoma_tree)
tree_fit <- ctree(status ~ ., data = Melanoma)
plot(melanoma_tree)
text(melanoma_tree, use.n = TRUE)
plot(tree_fit)
learners <- mlr_learners
print(learners)
task = as_task_classif(sex ~ ., data = Melanoma)
task
learner = lrn("classif.rpart", cp = .01)
split = partition(task, ratio = 0.67)
learner$train(task, split$train)
prediction = learner$predict(task, split$test_set)
prediction$confusion
measure = msr("classif.acc")
prediction$score(measure)
resampling = rsmp("cv", folds = 3L)
rr = resample(task, learner, resampling)
rr$score(measure)[, .(task_id, learner_id, iteration, classif.acc)]
rr$aggregate(measure)
#install.packages("party")
#install.packages("mlr")
#install.packages("C50")
#install.packages("mlr3learners")
library(readr)
library(dplyr)
library(party)
library(rpart)
library(mlr3)
#library(mlr)
library(MASS)
library(C50)
library(mlr3learners)
data("Melanoma")
#melanoma_task <- makeClassifTask(status ~ ., data = Melanoma, target = "sex")
melanoma_tree <- rpart(sex ~ ., data = Melanoma, method = "class")
summary(melanoma_tree)
tree_fit <- ctree(status ~ ., data = Melanoma)
plot(melanoma_tree)
text(melanoma_tree, use.n = TRUE)
plot(tree_fit)
learners <- mlr_learners
print(learners)
task = as_task_classif(sex ~ ., data = Melanoma)
task
learner = lrn("classif.rpart", cp = .01)
split = partition(task, ratio = 0.67)
learner$train(task, split$train)
prediction = learner$predict(task, split$test_set)
prediction$confusion
measure = msr("classif.acc")
prediction$score(measure)
resampling = rsmp("cv", folds = 3L)
rr = resample(task, learner, resampling)
rr$score(measure)[, .(task_id, learner_id, iteration, classif.acc)]
rr$aggregate(measure)
#install.packages("party")
#install.packages("mlr")
#install.packages("C50")
#install.packages("mlr3learners")
library(readr)
library(dplyr)
library(party)
library(rpart)
library(mlr3)
#library(mlr)
library(MASS)
library(C50)
library(mlr3learners)
data("Melanoma")
#melanoma_task <- makeClassifTask(status ~ ., data = Melanoma, target = "sex")
melanoma_tree <- rpart(sex ~ ., data = Melanoma, method = "class")
summary(melanoma_tree)
tree_fit <- ctree(status ~ ., data = Melanoma)
plot(melanoma_tree)
text(melanoma_tree, use.n = TRUE)
plot(tree_fit)
learners <- mlr_learners
print(learners)
task = as_task_classif(sex ~ ., data = Melanoma)
task
learner = lrn("classif.rpart", cp = .01)
split = partition(task, ratio = 0.67)
learner$train(task, split$train)
prediction = learner$predict(task, split$test_set)
prediction$confusion
measure = msr("classif.acc")
prediction$score(measure)
resampling = rsmp("cv", folds = 3L)
rr = resample(task, learner, resampling)
rr$score(measure)[, .(task_id, learner_id, iteration, classif.acc)]
rr$aggregate(measure)
#install.packages("party")
#install.packages("mlr")
#install.packages("C50")
#install.packages("mlr3learners")
library(readr)
library(dplyr)
library(party)
library(rpart)
library(mlr3)
#library(mlr)
library(MASS)
library(C50)
library(mlr3learners)
smartfony <- read.csv("./smartfony.csv")
smartfony_w <- smartfony[,c('pamiec_RAM', 'pamiec_wbudowana', 'aparat_foto', 'cena', 'ocena_klientow')]
smartfony_w <- as.data.frame(lapply(smartfony_w, function(x) {
if(is.character(x)) {
return(as.factor(x))
} else {
return(x)
}
}))
character_columns <- sapply(smartfony, is.character)
character_columns
#smartfony[character_columns] <- lapply(smartfony_w[character_columns], as.factor)
str(smartfony_w)
tree_fit <- ctree(ocena_klientow ~ ., data = smartfony_w)
smartfony_tree <- rpart(ocena_klientow ~ ., data = smartfony_w, control = rpart.control(minsplit = 5, cp = 0.05))
summary(smartfony_tree)
tree_fit <- ctree(ocena_klientow ~ ., data = smartfony_w)
plot(smartfony_tree)
text(smartfony_tree, use.n = TRUE)
plot(tree_fit)
learners <- mlr_learners
print(learners)
task = as_task_classif(ocena_klientow ~ ., data = smartfony_w)
task
learner = lrn("classif.rpart", cp = .01)
split = partition(task, ratio = 0.67)
learner$train(task, split$train)
prediction = learner$predict(task, split$test_set)
prediction$confusion
measure = msr("classif.acc")
prediction$score(measure)
resampling = rsmp("cv", folds = 3L)
rr = resample(task, learner, resampling)
rr$score(measure)[, .(task_id, learner_id, iteration, classif.acc)]
rr$aggregate(measure)
