#install.packages("neuralnet")
library("neuralnet")
set.seed(123)
f <- function(x){return (1/sqrt(x))}
x <- seq(1,10)
fx<-f(x)
traininginput <- as.data.frame(fx=fx ,x = x)
maxs <- max(traininginput)
mins <- min(traininginput)
scaled.traininginput <- as.data.frame(scale(traininginput), center = mins, scale=maxs - mins)
#trainingdata <-chind(scaled.traininginput)
net <-neuralnet(fx~ x, data = scaled.traininginput , hidden = c(3,2), threshold = 0.01)
plot(net)
test_data <- data.frame(x=seq(1,10))
scaled.traininginput.test <-as.data.frame(scale(test_data,  center = mins, scale=maxs - mins))
redictions <- compute(net, scaled.traininginput.test)
smartfony <- read.csv("./smartfony.csv")
traininginputSmartfony <- as.data.frame(smartfony$nazwa, smartfony$cena)
print(traininginputSmartfony)
smartfonyMaxs <- max(traininginputSmartfony)
smartfony <- read.csv("./smartfony.csv")
# Create the training input DataFrame
traininginputSmartfony <- smartfony[, c("nazwa", "cena")]
# Scaling the data
smartfonyMaxs <- apply(traininginputSmartfony, 2, max)
smartfonyMins <- apply(traininginputSmartfony, 2, min)
scaled.traininginputSmartfony <- as.data.frame(scale(traininginputSmartfony, center = smartfonyMins, scale = smartfonyMaxs - smartfonyMins))
library("neuralnet")
#1.
smartfony <- read.csv("./smartfony.csv")
# Create the training input DataFrame
traininginputSmartfony <- smartfony[, c("nazwa", "cena")]
# Scaling the data
smartfonyMaxs <- apply(traininginputSmartfony, 2, max)
smartfonyMins <- apply(traininginputSmartfony, 2, min)
scaled.traininginputSmartfony <- as.data.frame(scale(traininginputSmartfony, center = smartfonyMins, scale = smartfonyMaxs - smartfonyMins))
smartfony <- read.csv("./smartfony.csv")
traininginputSmartfony <- as.data.frame(smartfony$nazwa, smartfony$cena)
print(traininginputSmartfony)
smartfonyMaxs <- max(traininginputSmartfony)
traininginputSmartfony <- smartfony[, c("nazwa", "cena")]
print(traininginputSmartfony)
smartfony <- read.csv("./smartfony.csv")
#traininginputSmartfony <- as.data.frame(smartfony$nazwa, smartfony$cena)
traininginputSmartfony <- smartfony[, c("nazwa", "cena")]
print(traininginputSmartfony)
smartfonyMaxs <- max(traininginputSmartfony)
smartfony <- read.csv("./smartfony.csv")
#traininginputSmartfony <- as.data.frame(smartfony$nazwa, smartfony$cena)
traininginputSmartfony <- smartfony[, c("nazwa", "cena")]
print(traininginputSmartfony)
smartfonyMaxs <- max(traininginputSmartfony, 2, max)
smartfony <- read.csv("./smartfony.csv")
#traininginputSmartfony <- as.data.frame(smartfony$nazwa, smartfony$cena)
traininginputSmartfony <- smartfony[, c("nazwa", "cena")]
print(traininginputSmartfony)
smartfonyMaxs <- max(traininginputSmartfony, 2, max)
smartfony <- read.csv("./smartfony.csv")
#traininginputSmartfony <- as.data.frame(smartfony$nazwa, smartfony$cena)
traininginputSmartfony <- smartfony[, c("nazwa", "cena")]
print(traininginputSmartfony)
smartfonyMaxs <- max(traininginputSmartfony, 2, max)
smartfony <- read.csv("./smartfony.csv")
#traininginputSmartfony <- as.data.frame(smartfony$nazwa, smartfony$cena)
traininginputSmartfony <- smartfony[, c("nazwa", "cena")]
print(traininginputSmartfony)
smartfonyMaxs <- max(traininginputSmartfony, 2, max)
traininginputSmartfony <- smartfony[, c("cena")]
# Scaling the numeric data
smartfonyMaxs <- apply(traininginputSmartfony, 2, max)
traininginputSmartfony <- smartfony[, c("cena")]
# Scaling the numeric data
smartfonyMaxs <- apply(traininginputSmartfony, max)
traininginputSmartfony <- smartfony[, c("cena")]
# Scaling the numeric data
smartfonyMaxs <- apply(traininginputSmartfony, 2, max)
smartfony <- read.csv("./smartfony.csv")
#traininginputSmartfony <- as.data.frame(smartfony$nazwa, smartfony$cena)
traininginputSmartfony <- smartfony[, c('nazwa', 'cena')]
print(traininginputSmartfony)
scaled.traininginputSmartfony <- as.data.frame(scale(traininginputSmartfony), normalize)
smartfony <- read.csv("./smartfony.csv")
#traininginputSmartfony <- as.data.frame(smartfony$nazwa, smartfony$cena)
traininginputSmartfony <- smartfony[, c('nazwa', 'cena')]
print(traininginputSmartfony)
traininginputSmartfony_scaled<- as.data.frame(lapply(traininginputSmartfony, normalize))
smartfony <- read.csv("./smartfony.csv")
#traininginputSmartfony <- as.data.frame(smartfony$nazwa, smartfony$cena)
traininginputSmartfony <- smartfony[, c('nazwa', 'cena')]
print(traininginputSmartfony)
traininginputSmartfony_scaled<- as.data.frame(lapply(traininginputSmartfony, normalizePath))
library("neuralnet")
trainingInput <- as.data.frame(read.csv("./smartfony.csv"))
trainingOutput <- as.data.frame(trainingInput[,5])
trainingInput <- trainingInput[,3:4]
maxs <- apply(trainingInput, 2, max)
mins <- apply(trainingInput, 2, min)
scaled.trainingInput <- as.data.frame(scale((trainingInput), center = mins, scale = maxs - mins))
print(head(scaled.trainingInput, 10))
trainingData <- cbind(scaled.trainingInput, trainingOutput)
trainingData <- cbind(scaled.trainingInput, as.data.frame(scale(trainingOutput, center = min(trainingOutput), scale = max(trainingOutput - min(trainingOutput)))))
library("neuralnet")
trainingInput <- as.data.frame(read.csv("./smartfony.csv"))
trainingOutput <- as.data.frame(trainingInput[,1])
trainingInput <- trainingInput[,6]
maxs <- apply(trainingInput, 2, max)
#2.
smartfony <- read.csv("./smartfony.csv")
# Select relevant columns
traininginputSmartfony <- smartfony[, c('nazwa', 'cena')]
# Normalize the 'cena' column
traininginputSmartfony$cena <- (traininginputSmartfony$cena - min(traininginputSmartfony$cena)) / (max(traininginputSmartfony$cena) - min(traininginputSmartfony$cena))
# Display the normalized data
print(traininginputSmartfony)
# Prepare the formula for the neural network
formula <- as.formula("cena ~ nazwa")
# Train the neural network
net <- neuralnet(formula, data = traininginputSmartfony, hidden = c(3,2), threshold = 0.01)
smartfony <- read.csv("./smartfony.csv")
# Select relevant columns
traininginputSmartfony <- smartfony[, c('nazwa', 'cena')]
# Normalize the 'cena' column
traininginputSmartfony$cena <- (traininginputSmartfony$cena - min(traininginputSmartfony$cena)) / (max(traininginputSmartfony$cena) - min(traininginputSmartfony$cena))
# Display the normalized data
print(traininginputSmartfony)
traininginputSmartfony$nazwa <- as.numeric(factor(traininginputSmartfony$nazwa))
# Prepare the formula for the neural network
formula <- as.formula("cena ~ nazwa")
# Train the neural network
net <- neuralnet(formula, data = traininginputSmartfony, hidden = c(3,2), threshold = 0.01)
# Plot the neural network
plot(net)
smartfony <- read.csv("./smartfony.csv")
# Select relevant columns
traininginputSmartfony <- smartfony[, c('nazwa', 'cena')]
# Normalize the 'cena' column
traininginputSmartfony$cena <- (traininginputSmartfony$cena - min(traininginputSmartfony$cena)) / (max(traininginputSmartfony$cena) - min(traininginputSmartfony$cena))
# Display the normalized data
print(traininginputSmartfony)
traininginputSmartfony$nazwa <- as.numeric(factor(traininginputSmartfony$nazwa))
# Prepare the formula for the neural network
formula <- as.formula("cena ~")
smartfony <- read.csv("./smartfony.csv")
# Select relevant columns
traininginputSmartfony <- smartfony[, c('nazwa', 'cena')]
# Normalize the 'cena' column
traininginputSmartfony$cena <- (traininginputSmartfony$cena - min(traininginputSmartfony$cena)) / (max(traininginputSmartfony$cena) - min(traininginputSmartfony$cena))
# Display the normalized data
print(traininginputSmartfony)
traininginputSmartfony$nazwa <- as.numeric(factor(traininginputSmartfony$nazwa))
# Prepare the formula for the neural network
formula <- as.formula("cena")
set.seed(123)
f <- function(x){return (1/sqrt(x))}
x <- seq(1,10)
fx<-f(x)
traininginput <- as.data.frame(fx=fx ,x = x)
maxs <- max(traininginput)
mins <- min(traininginput)
scaled.traininginput <- as.data.frame(scale(traininginput), center = mins, scale=maxs - mins)
trainingdata <-chind(scaled.traininginput)
set.seed(123)
f <- function(x){return (1/sqrt(x))}
x <- seq(1,10)
fx<-f(x)
traininginput <- as.data.frame(fx=fx ,x = x)
maxs <- max(traininginput)
mins <- min(traininginput)
scaled.traininginput <- as.data.frame(scale(traininginput), center = mins, scale=maxs - mins)
net <-neuralnet(fx~ x, data = scaled.traininginput , hidden = c(3,2), threshold = 0.01)
plot(net)
test_data <- data.frame(x=seq(1,10))
scaled.traininginput.test <-as.data.frame(scale(test_data,  center = mins, scale=maxs - mins))
redictions <- compute(net, scaled.traininginput.test)
test_data <- data.frame(x=seq(1,10))
scaled.traininginput.test <-as.data.frame(scale(test_data,  center = mins, scale=maxs - mins))
redictions <- compute(net, scaled.traininginput.test)
print(traininginputSmartfony)
# Prepare test data
test_data <- data.frame(nazwa = seq(1, 10))
# Normalize the test data 'nazwa' column using the same levels as training data
test_data$nazwa <- as.numeric(factor(test_data$nazwa, levels = levels(factor(traininginputSmartfony$nazwa))))
# Normalize the test data 'nazwa' column
scaled_test_data <- (test_data$nazwa - min(traininginputSmartfony$nazwa)) / (max(traininginputSmartfony$nazwa) - min(traininginputSmartfony$nazwa))
# Make predictions
predictions <- compute(net, scaled_test_data)
test_data <- data.frame(nazwa = seq(1, 15), cena = seq(0,1))
# Prepare test data
test_data <- data.frame(nazwa = seq(1, 15), cena = seq(0,1.0))
# Prepare test data
test_data <- data.frame(nazwa = seq(1, 15), cena )
# Prepare test data
test_data <- data.frame(nazwa = seq(1, 15))
# Normalize the test data 'nazwa' column using the same levels as training data
test_data$nazwa <- as.numeric(factor(test_data$nazwa, levels = levels(factor(traininginputSmartfony$nazwa))))
# Normalize the test data 'nazwa' column
scaled_test_data <- (test_data$nazwa - min(traininginputSmartfony$nazwa)) / (max(traininginputSmartfony$nazwa) - min(traininginputSmartfony$nazwa))
# Make predictions
predictions <- compute(net, scaled_test_data)
set.seed(123)
print(traininginputSmartfony)
# Prepare test data
test_data <- data.frame(nazwa = seq(1, 15))
# Normalize the test data 'nazwa' column using the same levels as training data
test_data$nazwa <- as.numeric(factor(test_data$nazwa, levels = levels(factor(traininginputSmartfony$nazwa))))
# Normalize the test data 'nazwa' column
scaled_test_data <- (test_data$nazwa - min(traininginputSmartfony$nazwa)) / (max(traininginputSmartfony$nazwa) - min(traininginputSmartfony$nazwa))
# Make predictions
predictions <- compute(net, scaled_test_data)
print(traininginputSmartfony)
# Prepare test data
test_data <- data.frame(nazwa = seq(1, 15))
# Normalize the test data 'nazwa' column using the same levels as training data
test_data$nazwa <- as.numeric(factor(test_data$nazwa, levels = levels(factor(traininginputSmartfony$nazwa))))
# Normalize the test data 'nazwa' column
scaled_test_data <- (test_data$nazwa - min(traininginputSmartfony$nazwa)) / (max(traininginputSmartfony$nazwa) - min(traininginputSmartfony$nazwa))
# Make predictions
predictions <- compute(net, scaled_test_data)
print(traininginputSmartfony)
# Prepare test data
test_data <- data.frame(nazwa = seq(1, 15))
# Convert 'nazwa' in test data to the same levels as training data
test_data$nazwa <- as.numeric(factor(test_data$nazwa, levels = levels(factor(traininginputSmartfony$nazwa))))
# Normalize the test data 'nazwa' column using the same scaling as training data
scaled_test_data <- data.frame(nazwa = (test_data$nazwa - min(traininginputSmartfony$nazwa)) / (max(traininginputSmartfony$nazwa) - min(traininginputSmartfony$nazwa)))
# Ensure the column name matches the training data
colnames(scaled_test_data) <- "nazwa"
# Make predictions
predictions <- compute(net, scaled_test_data)
# Scale back the predictions to the original 'cena' scale
predicted_cena <- predictions$net.result * (max_cena - min_cena) + min_cena
print(traininginputSmartfony)
# Prepare test data
test_data <- data.frame(nazwa = seq(1, 15))
# Convert 'nazwa' in test data to the same levels as training data
test_data$nazwa <- as.numeric(factor(test_data$nazwa, levels = levels(factor(traininginputSmartfony$nazwa))))
# Normalize the test data 'nazwa' column using the same scaling as training data
scaled_test_data <- data.frame(nazwa = (test_data$nazwa - min(traininginputSmartfony$nazwa)) / (max(traininginputSmartfony$nazwa) - min(traininginputSmartfony$nazwa)))
# Ensure the column name matches the training data
colnames(scaled_test_data) <- "nazwa"
# Make predictions
predictions <- compute(net, scaled_test_data)
# Scale back the predictions to the original 'cena' scale
predicted_cena <- predictions$net.result * (cena)
Prepare test data
print(traininginputSmartfony)
# Prepare test data
test_data <- data.frame(nazwa = seq(1, 15))
# Normalize the test data 'nazwa' column using the same levels as training data
test_data$nazwa <- as.numeric(factor(test_data$nazwa, levels = levels(factor(traininginputSmartfony$nazwa))))
# Normalize the test data 'nazwa' column
scaled_test_data <- (test_data$nazwa - min(traininginputSmartfony$nazwa)) / (max(traininginputSmartfony$nazwa) - min(traininginputSmartfony$nazwa))
# Make predictions
predictions <- compute(net, scaled_test_data)
Prepare test data
# Prepare test data
test_data <- data.frame(nazwa = seq(1, 15))
# Check the structure of traininginputSmartfony
print(str(traininginputSmartfony))
# Convert 'nazwa' in test data to the same levels as training data
test_data$nazwa <- as.numeric(factor(test_data$nazwa, levels = levels(factor(traininginputSmartfony$nazwa))))
# Normalize the test data 'nazwa' column using the same scaling as training data
min_nazwa <- min(traininginputSmartfony$nazwa)
max_nazwa <- max(traininginputSmartfony$nazwa)
scaled_test_data <- data.frame(nazwa = (test_data$nazwa - min_nazwa) / (max_nazwa - min_nazwa))
# Ensure the column name matches the training data
colnames(scaled_test_data) <- "nazwa"
# Print scaled test data to check normalization
print(scaled_test_data)
# Make predictions
predictions <- compute(net, scaled_test_data)
# Assuming you have min_cena and max_cena defined as the minimum and maximum values of 'cena' in your training data
# Scale back the predictions to the original 'cena' scale
min_cena <- min(traininginputSmartfony$cena)
max_cena <- max(traininginputSmartfony$cena)
predicted_cena <- predictions$net.result * (max_cena - min_cena) + min_cena
# Display the predictions
result <- data.frame(test_data, Predicted_Cena = predicted_cena)
print(result)
#install.packages("neuralnet")
library("neuralnet")
#1.
set.seed(123)
f <- function(x){return (1/sqrt(x))}
x <- seq(1,10)
fx<-f(x)
traininginput <- as.data.frame(fx=fx ,x = x)
maxs <- max(traininginput)
mins <- min(traininginput)
scaled.traininginput <- as.data.frame(scale(traininginput), center = mins, scale=maxs - mins)
net <-neuralnet(fx~ x, data = scaled.traininginput , hidden = c(3,2), threshold = 0.01)
plot(net)
test_data <- data.frame(x=seq(1,10))
scaled.traininginput.test <-as.data.frame(scale(test_data,  center = mins, scale=maxs - mins))
redictions <- compute(net, scaled.traininginput.test)
#2.
smartfony <- read.csv("./smartfony.csv")
traininginputSmartfony <- smartfony[, c('nazwa', 'cena')]
traininginputSmartfony$cena <- (traininginputSmartfony$cena - min(traininginputSmartfony$cena)) / (max(traininginputSmartfony$cena) - min(traininginputSmartfony$cena))
print(traininginputSmartfony)
traininginputSmartfony$nazwa <- as.numeric(factor(traininginputSmartfony$nazwa))
formula <- as.formula("cena ~ nazwa")
net <- neuralnet(formula, data = traininginputSmartfony, hidden = c(3,2), threshold = 0.01)
plot(net)
print(traininginputSmartfony)
test_data <- data.frame(nazwa = seq(1, 15))
print(str(traininginputSmartfony))
test_data$nazwa <- as.numeric(factor(test_data$nazwa, levels = levels(factor(traininginputSmartfony$nazwa))))
min_nazwa <- min(traininginputSmartfony$nazwa)
max_nazwa <- max(traininginputSmartfony$nazwa)
scaled_test_data <- data.frame(nazwa = (test_data$nazwa - min_nazwa) / (max_nazwa - min_nazwa))
colnames(scaled_test_data) <- "nazwa"
print(scaled_test_data)
predictions <- compute(net, scaled_test_data)
min_cena <- min(traininginputSmartfony$cena)
max_cena <- max(traininginputSmartfony$cena)
predicted_cena <- predictions$net.result * (max_cena - min_cena) + min_cena
result <- data.frame(test_data, Predicted_Cena = predicted_cena)
print(result)
#install.packages("neuralnet")
library("neuralnet")
#1.
set.seed(123)
f <- function(x){return (1/sqrt(x))}
x <- seq(1,10)
fx<-f(x)
traininginput <- as.data.frame(fx=fx ,x = x)
maxs <- max(traininginput)
mins <- min(traininginput)
scaled.traininginput <- as.data.frame(scale(traininginput), center = mins, scale=maxs - mins)
net <-neuralnet(fx~ x, data = scaled.traininginput , hidden = c(3,2), threshold = 0.01)
plot(net)
test_data <- data.frame(x=seq(1,10))
scaled.traininginput.test <-as.data.frame(scale(test_data,  center = mins, scale=maxs - mins))
redictions <- compute(net, scaled.traininginput.test)
#2.
smartfony <- read.csv("./smartfony.csv")
traininginputSmartfony <- smartfony[, c('nazwa', 'cena')]
traininginputSmartfony$cena <- (traininginputSmartfony$cena - min(traininginputSmartfony$cena)) / (max(traininginputSmartfony$cena) - min(traininginputSmartfony$cena))
print(traininginputSmartfony)
traininginputSmartfony$nazwa <- as.numeric(factor(traininginputSmartfony$nazwa))
formula <- as.formula("cena ~ nazwa")
net <- neuralnet(formula, data = traininginputSmartfony, hidden = c(3,2), threshold = 0.01)
plot(net)
print(traininginputSmartfony)
test_data <- data.frame(nazwa = seq(1, 15))
print(str(traininginputSmartfony))
test_data$nazwa <- as.numeric(factor(test_data$nazwa, levels = levels(factor(traininginputSmartfony$nazwa))))
min_nazwa <- min(traininginputSmartfony$nazwa)
max_nazwa <- max(traininginputSmartfony$nazwa)
scaled_test_data <- data.frame(nazwa = (test_data$nazwa - min_nazwa) / (max_nazwa - min_nazwa))
colnames(scaled_test_data) <- "nazwa"
print(scaled_test_data)
predictions <- compute(net, scaled_test_data)
min_cena <- min(traininginputSmartfony$cena)
max_cena <- max(traininginputSmartfony$cena)
predicted_cena <- predictions$net.result * (max_cena - min_cena) + min_cena
result <- data.frame(test_data, Predicted_Cena = predicted_cena)
print(result)
